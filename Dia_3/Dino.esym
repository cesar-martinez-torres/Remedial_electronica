D G "__PCM__" 0 0 ""5.076""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""10-jun.-21""
D G "__TIME__" 0 0 ""16:29:24""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC16F1937 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 40 ""
v L "value" 1 40 "int8" `55 
f B "set_tris_a" 1 40 "void(int8 value)" `54 
f N "set_tris_b" 1 41 ""
v L "value" 1 41 "int8" `57 
f B "set_tris_b" 1 41 "void(int8 value)" `56 
f N "set_tris_c" 1 42 ""
v L "value" 1 42 "int8" `59 
f B "set_tris_c" 1 42 "void(int8 value)" `58 
f N "set_tris_d" 1 43 ""
v L "value" 1 43 "int8" `61 
f B "set_tris_d" 1 43 "void(int8 value)" `60 
f N "set_tris_e" 1 44 ""
v L "value" 1 44 "int8" `63 
f B "set_tris_e" 1 44 "void(int8 value)" `62 
f N "get_tris_a" 1 45 ""
f B "get_tris_a" 1 45 "int8()" `64 
f N "get_tris_b" 1 46 ""
f B "get_tris_b" 1 46 "int8()" `65 
f N "get_tris_c" 1 47 ""
f B "get_tris_c" 1 47 "int8()" `66 
f N "get_tris_d" 1 48 ""
f B "get_tris_d" 1 48 "int8()" `67 
f N "get_tris_e" 1 49 ""
f B "get_tris_e" 1 49 "int8()" `68 
f N "output_a" 1 50 ""
v L "value" 1 50 "int8" `70 
f B "output_a" 1 50 "void(int8 value)" `69 
f N "output_b" 1 51 ""
v L "value" 1 51 "int8" `72 
f B "output_b" 1 51 "void(int8 value)" `71 
f N "output_c" 1 52 ""
v L "value" 1 52 "int8" `74 
f B "output_c" 1 52 "void(int8 value)" `73 
f N "output_d" 1 53 ""
v L "value" 1 53 "int8" `76 
f B "output_d" 1 53 "void(int8 value)" `75 
f N "output_e" 1 54 ""
v L "value" 1 54 "int8" `78 
f B "output_e" 1 54 "void(int8 value)" `77 
f N "input_a" 1 55 ""
f B "input_a" 1 55 "int8()" `79 
f N "input_b" 1 56 ""
f B "input_b" 1 56 "int8()" `80 
f N "input_c" 1 57 ""
f B "input_c" 1 57 "int8()" `81 
f N "input_d" 1 58 ""
f B "input_d" 1 58 "int8()" `82 
f N "input_e" 1 59 ""
f B "input_e" 1 59 "int8()" `83 
f N "input_change_a" 1 60 ""
f B "input_change_a" 1 60 "int8()" `84 
f N "input_change_b" 1 61 ""
f B "input_change_b" 1 61 "int8()" `85 
f N "input_change_c" 1 62 ""
f B "input_change_c" 1 62 "int8()" `86 
f N "input_change_d" 1 63 ""
f B "input_change_d" 1 63 "int8()" `87 
f N "input_change_e" 1 64 ""
f B "input_change_e" 1 64 "int8()" `88 
f N "port_b_pullups" 1 65 ""
v L "upmask" 1 65 "int8" `90 
f B "port_b_pullups" 1 65 "void(int8 upmask)" `89 
f N "port_e_pullups" 1 66 ""
v L "upmask" 1 66 "int8" `92 
f B "port_e_pullups" 1 66 "void(int8 upmask)" `91 
f N "input" 1 67 ""
v L "pin" 1 67 "int16" `94 
f B "input" 1 67 "int8(int16 pin)" `93 
f N "input_state" 1 68 ""
v L "pin" 1 68 "int16" `96 
f B "input_state" 1 68 "int8(int16 pin)" `95 
f N "output_low" 1 69 ""
v L "pin" 1 69 "int16" `98 
f B "output_low" 1 69 "void(int16 pin)" `97 
f N "output_high" 1 70 ""
v L "pin" 1 70 "int16" `100 
f B "output_high" 1 70 "void(int16 pin)" `99 
f N "output_toggle" 1 71 ""
v L "pin" 1 71 "int16" `102 
f B "output_toggle" 1 71 "void(int16 pin)" `101 
f N "output_bit" 1 72 ""
v L "pin" 1 72 "int16" `104 
v L "level" 1 72 "int8" `105 
f B "output_bit" 1 72 "void(int16 pin,int8 level)" `103 
f N "output_float" 1 73 ""
v L "pin" 1 73 "int16" `107 
f B "output_float" 1 73 "void(int16 pin)" `106 
f N "output_drive" 1 74 ""
v L "pin" 1 74 "int16" `109 
f B "output_drive" 1 74 "void(int16 pin)" `108  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 78 "96"
d G "PIN_A1" 1 79 "97"
d G "PIN_A2" 1 80 "98"
d G "PIN_A3" 1 81 "99"
d G "PIN_A4" 1 82 "100"
d G "PIN_A5" 1 83 "101"
d G "PIN_A6" 1 84 "102"
d G "PIN_A7" 1 85 "103"
d G "PIN_B0" 1 87 "104"
d G "PIN_B1" 1 88 "105"
d G "PIN_B2" 1 89 "106"
d G "PIN_B3" 1 90 "107"
d G "PIN_B4" 1 91 "108"
d G "PIN_B5" 1 92 "109"
d G "PIN_B6" 1 93 "110"
d G "PIN_B7" 1 94 "111"
d G "PIN_C0" 1 96 "112"
d G "PIN_C1" 1 97 "113"
d G "PIN_C2" 1 98 "114"
d G "PIN_C3" 1 99 "115"
d G "PIN_C4" 1 100 "116"
d G "PIN_C5" 1 101 "117"
d G "PIN_C6" 1 102 "118"
d G "PIN_C7" 1 103 "119"
d G "PIN_D0" 1 105 "120"
d G "PIN_D1" 1 106 "121"
d G "PIN_D2" 1 107 "122"
d G "PIN_D3" 1 108 "123"
d G "PIN_D4" 1 109 "124"
d G "PIN_D5" 1 110 "125"
d G "PIN_D6" 1 111 "126"
d G "PIN_D7" 1 112 "127"
d G "PIN_E0" 1 114 "128"
d G "PIN_E1" 1 115 "129"
d G "PIN_E2" 1 116 "130"
d G "PIN_E3" 1 117 "131"
d G "FALSE" 1 120 "0"
d G "TRUE" 1 121 "1"
d G "BYTE" 1 123 "int8"
d G "BOOLEAN" 1 124 "int1"
d G "getc" 1 126 "getch"
d G "fgetc" 1 127 "getch"
d G "getchar" 1 128 "getch"
d G "putc" 1 129 "putchar"
d G "fputc" 1 130 "putchar"
d G "fgets" 1 131 "gets"
d G "fputs" 1 132 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 137 ""
f B "restart_cause" 1 137 "int8()" `110 
f N "reset_cpu" 1 138 ""
f B "reset_cpu" 1 138 "void()" `111 
f N "sleep" 1 139 ""
f B "sleep" 1 139 "void()" `112  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 1 141 "0x3C"
d G "MCLR_FROM_POWER_UP" 1 142 "0x34"
d G "BROWNOUT_RESTART" 1 143 "0x3E"
d G "MCLR_FROM_SLEEP" 1 144 "0x27"
d G "WDT_TIMEOUT" 1 145 "0x1F"
d G "WDT_FROM_SLEEP" 1 146 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 1 147 "0x2F"
d G "MCLR_FROM_RUN" 1 148 "0x37"
d G "RESET_INSTRUCTION" 1 149 "0x3B"
d G "STACK_OVERFLOW" 1 150 "0xBF"
d G "STACK_UNDERFLOW" 1 151 "0x7F"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 158 ""
v L "mode" 1 158 "int8" `114 
f B "setup_timer_0" 1 158 "void(int8 mode)" `113 
f N "set_timer0" 1 159 ""
v L "value" 1 159 "int8" `116 
f B "set_timer0" 1 159 "void(int8 value)" `115 
f N "get_timer0" 1 160 ""
f B "get_timer0" 1 160 "int8()" `117 
f N "setup_counters" 1 161 ""
v L "mode" 1 161 "int8" `119 
v L "prescaler" 1 161 "int8" `120 
f B "setup_counters" 1 161 "void(int8 mode,int8 prescaler)" `118 
f N "set_rtcc" 1 162 ""
v L "value" 1 162 "int8" `122 
f B "set_rtcc" 1 162 "void(int8 value)" `121 
f N "get_rtcc" 1 163 ""
f B "get_rtcc" 1 163 "int8()" `123  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 165 "0"
d G "T0_EXT_L_TO_H" 1 166 "32"
d G "T0_EXT_H_TO_L" 1 167 "48"
d G "T0_DIV_1" 1 169 "8"
d G "T0_DIV_2" 1 170 "0"
d G "T0_DIV_4" 1 171 "1"
d G "T0_DIV_8" 1 172 "2"
d G "T0_DIV_16" 1 173 "3"
d G "T0_DIV_32" 1 174 "4"
d G "T0_DIV_64" 1 175 "5"
d G "T0_DIV_128" 1 176 "6"
d G "T0_DIV_256" 1 177 "7"
d G "T0_8_BIT" 1 180 "0"
d G "RTCC_INTERNAL" 1 184 "0"
d G "RTCC_EXT_L_TO_H" 1 185 "32"
d G "RTCC_EXT_H_TO_L" 1 186 "48"
d G "RTCC_DIV_1" 1 187 "8"
d G "RTCC_DIV_2" 1 188 "0"
d G "RTCC_DIV_4" 1 189 "1"
d G "RTCC_DIV_8" 1 190 "2"
d G "RTCC_DIV_16" 1 191 "3"
d G "RTCC_DIV_32" 1 192 "4"
d G "RTCC_DIV_64" 1 193 "5"
d G "RTCC_DIV_128" 1 194 "6"
d G "RTCC_DIV_256" 1 195 "7"
d G "RTCC_8_BIT" 1 196 "0"
c L "get_rtcc" 1 3 7 "FUNCTION"
f N "setup_wdt" 1 206 ""
v L "mode" 1 206 "int16" `125 
f B "setup_wdt" 1 206 "void(int16 mode)" `124 
f N "restart_wdt" 1 207 ""
f B "restart_wdt" 1 207 "void()" `126  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 209 "0x1000"
d G "WDT_OFF" 1 210 "0x2000"
d G "WDT_1MS" 1 212 "0x100"
d G "WDT_2MS" 1 213 "0x101"
d G "WDT_4MS" 1 214 "0x102"
d G "WDT_8MS" 1 215 "0x103"
d G "WDT_16MS" 1 216 "0x104"
d G "WDT_32MS" 1 217 "0x105"
d G "WDT_64MS" 1 218 "0x106"
d G "WDT_128MS" 1 219 "0x107"
d G "WDT_256MS" 1 220 "0x108"
d G "WDT_512MS" 1 221 "0x109"
d G "WDT_1S" 1 222 "0x10A"
d G "WDT_2S" 1 223 "0x10B"
d G "WDT_4S" 1 224 "0x10C"
d G "WDT_8S" 1 225 "0x10D"
d G "WDT_16S" 1 226 "0x10E"
d G "WDT_32S" 1 227 "0x10F"
d G "WDT_64S" 1 228 "0x110"
d G "WDT_128S" 1 229 "0x111"
d G "WDT_256S" 1 230 "0x112"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 235 ""
v L "mode" 1 235 "int16" `128 
f B "setup_timer_1" 1 235 "void(int16 mode)" `127 
f N "get_timer1" 1 236 ""
f B "get_timer1" 1 236 "int16()" `129 
f N "set_timer1" 1 237 ""
v L "value" 1 237 "int16" `131 
f B "set_timer1" 1 237 "void(int16 value)" `130  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 240 "0"
d G "T1_CAPSENSE" 1 241 "0xC5"
d G "T1_EXTERNAL" 1 242 "0x85"
d G "T1_EXTERNAL_SYNC" 1 243 "0x81"
d G "T1_FOSC" 1 244 "0x45"
d G "T1_INTERNAL" 1 245 "0x05"
d G "T1_ENABLE_T1OSC" 1 247 "0x08"
d G "T1_DIV_BY_1" 1 249 "0x00"
d G "T1_DIV_BY_2" 1 250 "0x10"
d G "T1_DIV_BY_4" 1 251 "0x20"
d G "T1_DIV_BY_8" 1 252 "0x30"
d G "T1_GATE" 1 254 "0x8000"
d G "T1_GATE_INVERTED" 1 255 "0xC000"
d G "T1_GATE_TOGGLE" 1 256 "0xA000"
d G "T1_GATE_SINGLE" 1 257 "0x9000"
d G "T1_GATE_TIMER0" 1 258 "0x8100"
d G "T1_GATE_COMP1" 1 259 "0x8200"
d G "T1_GATE_COMP2" 1 260 "0x8300"
d G "T1_GATE_B5" 1 262 "0"
d G "T1_GATE_C4" 1 263 "0x10000"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 268 ""
v L "mode" 1 268 "int8" `133 
v L "period" 1 268 "int8" `134 
v L "postscale" 1 268 "int8" `135 
f B "setup_timer_2" 1 268 "void(int8 mode,int8 period,int8 postscale)" `132 
f N "get_timer2" 1 269 ""
f B "get_timer2" 1 269 "int8()" `136 
f N "set_timer2" 1 270 ""
v L "value" 1 270 "int8" `138 
f B "set_timer2" 1 270 "void(int8 value)" `137  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 272 "0"
d G "T2_DIV_BY_1" 1 273 "4"
d G "T2_DIV_BY_4" 1 274 "5"
d G "T2_DIV_BY_16" 1 275 "6"
d G "T2_DIV_BY_64" 1 276 "7"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_4" 1 281 ""
v L "mode" 1 281 "int16" `140 
v L "period" 1 281 "int8" `141 
v L "postscaler" 1 281 "int8" `142 
f B "setup_timer_4" 1 281 "void(int16 mode,int8 period,int8 postscaler)" `139 
f N "get_timer4" 1 282 ""
f B "get_timer4" 1 282 "int8()" `143 
f N "set_timer4" 1 283 ""
v L "value" 1 283 "int8" `145 
f B "set_timer4" 1 283 "void(int8 value)" `144  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 1 285 "0"
d G "T4_DIV_BY_1" 1 286 "4"
d G "T4_DIV_BY_4" 1 287 "5"
d G "T4_DIV_BY_16" 1 288 "6"
d G "T4_DIV_BY_64" 1 289 "7"
c L "set_timer4" 1 3 3 "FUNCTION"
f N "setup_timer_6" 1 294 ""
v L "mode" 1 294 "int16" `147 
v L "period" 1 294 "int8" `148 
v L "postscaler" 1 294 "int8" `149 
f B "setup_timer_6" 1 294 "void(int16 mode,int8 period,int8 postscaler)" `146 
f N "get_timer6" 1 295 ""
f B "get_timer6" 1 295 "int8()" `150 
f N "set_timer6" 1 296 ""
v L "value" 1 296 "int8" `152 
f B "set_timer6" 1 296 "void(int8 value)" `151  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 1 299 "0"
d G "T6_DIV_BY_1" 1 300 "4"
d G "T6_DIV_BY_4" 1 301 "5"
d G "T6_DIV_BY_16" 1 302 "6"
d G "T6_DIV_BY_64" 1 303 "7"
c L "set_timer6" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 309 ""
v L "mode" 1 309 "int32" `154 
f B "setup_ccp1" 1 309 "void(int32 mode)" `153 
f N "setup_ccp1" 1 310 ""
v L "mode" 1 310 "int32" `156 
v L "pwm" 1 310 "int8" `157 
f B "setup_ccp1" 1 310 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm1_duty" 1 311 ""
v L "value" 1 311 "int16" `159 
f B "set_pwm1_duty" 1 311 "void(int16 value)" `158  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 313 "0"
d G "CCP_CAPTURE_FE" 1 314 "0x04"
d G "CCP_CAPTURE_RE" 1 315 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 316 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 317 "0x07"
d G "CCP_COMPARE_TOGGLE" 1 318 "0x02"
d G "CCP_COMPARE_SET_ON_MATCH" 1 319 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 320 "0x09"
d G "CCP_COMPARE_INT" 1 321 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 322 "0x0B"
d G "CCP_PWM" 1 323 "0x0C"
d G "CCP_PWM_PLUS_1" 1 324 "0x1c"
d G "CCP_PWM_PLUS_2" 1 325 "0x2c"
d G "CCP_PWM_PLUS_3" 1 326 "0x3c"
d G "CCP_PWM_H_H" 1 332 "0x0c"
d G "CCP_PWM_H_L" 1 333 "0x0d"
d G "CCP_PWM_L_H" 1 334 "0x0e"
d G "CCP_PWM_L_L" 1 335 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 337 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 338 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 339 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 341 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 342 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 343 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 344 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 345 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 346 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 347 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 349 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 350 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 351 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 353 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 354 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 355 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 357 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 359 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 360 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 361 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 362 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 363 "0x10000000"
d G "CCP_TIMER2" 1 366 "0x0000"
d G "CCP_TIMER4" 1 367 "0x1000"
d G "CCP_TIMER6" 1 368 "0x2000"
d G "CCP2_C1" 1 370 "0x000"
d G "CCP2_B3" 1 371 "0x100"
d G "CCP_P2B_C0" 1 372 "0x000"
d G "CCP_P2B_D2" 1 373 "0x200"
d G "CCP3_E0" 1 374 "0x000"
d G "CCP3_B5" 1 375 "0x100"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 379 ""
v L "mode" 1 379 "int32" `164 
f B "setup_ccp2" 1 379 "void(int32 mode)" `163 
f N "setup_ccp2" 1 380 ""
v L "mode" 1 380 "int32" `166 
v L "pwm" 1 380 "int8" `167 
f B "setup_ccp2" 1 380 "void(int32 mode,int8 pwm)" `165 
f N "set_pwm2_duty" 1 381 ""
v L "value" 1 381 "int16" `169 
f B "set_pwm2_duty" 1 381 "void(int16 value)" `168 
c L "set_pwm2_duty" 1 3 1 "FUNCTION"
f N "setup_ccp3" 1 387 ""
v L "mode" 1 387 "int32" `174 
f B "setup_ccp3" 1 387 "void(int32 mode)" `173 
f N "setup_ccp3" 1 388 ""
v L "mode" 1 388 "int32" `176 
v L "pwm" 1 388 "int8" `177 
f B "setup_ccp3" 1 388 "void(int32 mode,int8 pwm)" `175 
f N "set_pwm3_duty" 1 389 ""
v L "value" 1 389 "int16" `179 
f B "set_pwm3_duty" 1 389 "void(int16 value)" `178 
c L "set_pwm3_duty" 1 3 1 "FUNCTION"
f N "setup_ccp4" 1 395 ""
v L "mode" 1 395 "int32" `184 
f B "setup_ccp4" 1 395 "void(int32 mode)" `183 
f N "setup_ccp4" 1 396 ""
v L "mode" 1 396 "int32" `186 
v L "pwm" 1 396 "int8" `187 
f B "setup_ccp4" 1 396 "void(int32 mode,int8 pwm)" `185 
f N "set_pwm4_duty" 1 397 ""
v L "value" 1 397 "int16" `189 
f B "set_pwm4_duty" 1 397 "void(int16 value)" `188 
c L "set_pwm4_duty" 1 3 1 "FUNCTION"
f N "setup_ccp5" 1 403 ""
v L "mode" 1 403 "int32" `194 
f B "setup_ccp5" 1 403 "void(int32 mode)" `193 
f N "setup_ccp5" 1 404 ""
v L "mode" 1 404 "int32" `196 
v L "pwm" 1 404 "int8" `197 
f B "setup_ccp5" 1 404 "void(int32 mode,int8 pwm)" `195 
f N "set_pwm5_duty" 1 405 ""
v L "value" 1 405 "int16" `199 
f B "set_pwm5_duty" 1 405 "void(int16 value)" `198 
c L "set_pwm5_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 412 ""
v L "mode" 1 412 "int32" `204 
f B "setup_spi" 1 412 "void(int32 mode)" `203 
f N "spi_write" 1 413 ""
v L "value" 1 413 "int8" `206 
f B "spi_write" 1 413 "void(int8 value)" `205 
f N "spi_read" 1 414 ""
f B "spi_read" 1 414 "int8()" `207 
f N "spi_read" 1 415 ""
v L "value" 1 415 "int8" `209 
f B "spi_read" 1 415 "int8(int8 value)" `208 
f N "spi_data_is_in" 1 416 ""
f B "spi_data_is_in" 1 416 "int8()" `210  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 418 "0x00"
d G "SPI_MASTER" 1 419 "0x20"
d G "SPI_SLAVE" 1 420 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 421 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 422 "0x00"
d G "SPI_CLK_DIV_4" 1 423 "0x00"
d G "SPI_CLK_DIV_16" 1 424 "0x01"
d G "SPI_CLK_DIV_64" 1 425 "0x02"
d G "SPI_CLK_T2" 1 426 "0x03"
d G "SPI_SS_DISABLED" 1 427 "0x01"
d G "SPI_SS_A5" 1 429 "0x000"
d G "SPI_SS_A0" 1 430 "0x10000"
d G "SPI_XMIT_L_TO_H" 1 432 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 433 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 435 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 436 "0x8000"
d G "SPI_L_TO_H" 1 439 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 440 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 3 2 "FUNCTION"
f N "setup_uart" 1 444 ""
v L "baud" 1 444 "int32" `212 
f B "setup_uart" 1 444 "void(int32 baud)" `211 
f N "setup_uart" 1 445 ""
v L "baud" 1 445 "int32" `214 
v L "stream" 1 445 "int8" `215 
f B "setup_uart" 1 445 "void(int32 baud,int8 stream)" `213 
f N "setup_uart" 1 446 ""
v L "baud" 1 446 "int32" `217 
v L "stream" 1 446 "int8" `218 
v L "clock" 1 446 "int32" `219 
f B "setup_uart" 1 446 "void(int32 baud,int8 stream,int32 clock)" `216 
f N "set_uart_speed" 1 447 ""
v L "baud" 1 447 "int32" `221 
f B "set_uart_speed" 1 447 "void(int32 baud)" `220 
f N "set_uart_speed" 1 448 ""
v L "baud" 1 448 "int32" `223 
v L "stream" 1 448 "int8" `224 
f B "set_uart_speed" 1 448 "void(int32 baud,int8 stream)" `222 
f N "set_uart_speed" 1 449 ""
v L "baud" 1 449 "int32" `226 
v L "stream" 1 449 "int8" `227 
v L "clock" 1 449 "int32" `228 
f B "set_uart_speed" 1 449 "void(int32 baud,int8 stream,int32 clock)" `225  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 453 "2"
d G "UART_DATA" 1 454 "4"
d G "UART_AUTODETECT" 1 455 "8"
d G "UART_AUTODETECT_NOWAIT" 1 456 "9"
d G "UART_WAKEUP_ON_RDA" 1 457 "10"
d G "UART_SEND_BREAK" 1 458 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 462 ""
v L "mode" 1 462 "int32" `230 
f B "setup_comparator" 1 462 "void(int32 mode)" `229  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 465 "0x00"
d G "CP1_A0_A3" 1 468 "0x8000"
d G "CP1_A1_A3" 1 469 "0x8001"
d G "CP1_B3_A3" 1 470 "0x8002"
d G "CP1_B1_A3" 1 471 "0x8003"
d G "CP1_A0_DAC" 1 472 "0x8010"
d G "CP1_A1_DAC" 1 473 "0x8011"
d G "CP1_B3_DAC" 1 474 "0x8012"
d G "CP1_B1_DAC" 1 475 "0x8013"
d G "CP1_A0_FVR" 1 476 "0x8020"
d G "CP1_A1_FVR" 1 477 "0x8021"
d G "CP1_B3_FVR" 1 478 "0x8022"
d G "CP1_B1_FVR" 1 479 "0x8023"
d G "CP1_A0_VSS" 1 480 "0x8030"
d G "CP1_A1_VSS" 1 481 "0x8031"
d G "CP1_B3_VSS" 1 482 "0x8032"
d G "CP1_B1_VSS" 1 483 "0x8033"
d G "CP1_INT_H2L" 1 485 "0x0040"
d G "CP1_INT_L2H" 1 486 "0x0080"
d G "CP1_OUT_ON_A4" 1 487 "0x2000"
d G "CP1_INVERT" 1 488 "0x1000"
d G "CP1_FAST" 1 489 "0x0400"
d G "CP1_HYST" 1 490 "0x0200"
d G "CP1_SYNC" 1 491 "0x0100"
d G "CP2_A0_A2" 1 494 "0x80000000"
d G "CP2_A1_A2" 1 495 "0x80010000"
d G "CP2_B3_A2" 1 496 "0x80020000"
d G "CP2_B1_A2" 1 497 "0x80030000"
d G "CP2_A0_DAC" 1 498 "0x80100000"
d G "CP2_A1_DAC" 1 499 "0x80110000"
d G "CP2_B3_DAC" 1 500 "0x80120000"
d G "CP2_B1_DAC" 1 501 "0x80130000"
d G "CP2_A0_FVR" 1 502 "0x80200000"
d G "CP2_A1_FVR" 1 503 "0x80210000"
d G "CP2_B3_FVR" 1 504 "0x80220000"
d G "CP2_B1_FVR" 1 505 "0x80230000"
d G "CP2_A0_VSS" 1 506 "0x80300000"
d G "CP2_A1_VSS" 1 507 "0x80310000"
d G "CP2_B3_VSS" 1 508 "0x80320000"
d G "CP2_B1_VSS" 1 509 "0x80330000"
d G "CP2_INT_H2L" 1 511 "0x00400000"
d G "CP2_INT_L2H" 1 512 "0x00800000"
d G "CP2_OUT_ON_A5" 1 513 "0x20000000"
d G "CP2_OUT_ON_A0" 1 514 "0x60000000"
d G "CP2_INVERT" 1 515 "0x10000000"
d G "CP2_FAST" 1 516 "0x04000000"
d G "CP2_HYST" 1 517 "0x02000000"
d G "CP2_SYNC" 1 518 "0x01000000"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 525 ""
v L "mode" 1 525 "int8" `234 
f B "setup_vref" 1 525 "void(int8 mode)" `233  "Constants used in setup_vref() are:"
d G "VREF_OFF" 1 527 "0"
d G "VREF_ON" 1 528 "0x80"
d G "VREF_ADC_OFF" 1 530 "0"
d G "VREF_ADC_1v024" 1 531 "0x81"
d G "VREF_ADC_2v048" 1 532 "0x82"
d G "VREF_ADC_4v096" 1 533 "0x83"
d G "VREF_COMP_DAC_OFF" 1 535 "0"
d G "VREF_COMP_DAC_1v024" 1 536 "0x84"
d G "VREF_COMP_DAC_2v048" 1 537 "0x88"
d G "VREF_COMP_DAC_4v096" 1 538 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 1 540 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 1 541 "0x20"
d G "TEMPERATURE_RANGE_LOW" 1 542 "0"
d G "TEMPERATURE_RANGE_HIGH" 1 543 "0x10"
c L "setup_vref" 1 3 3 "FUNCTION"
f N "setup_dac" 1 548 ""
v L "mode" 1 548 "int8" `236 
f B "setup_dac" 1 548 "void(int8 mode)" `235 
f N "dac_write" 1 549 ""
v L "value" 1 549 "int8" `238 
f B "dac_write" 1 549 "void(int8 value)" `237  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 1 551 "0"
d G "DAC_VSS_VDD" 1 552 "0x80"
d G "DAC_VREF_VDD" 1 553 "0x81"
d G "DAC_VSS_VREF" 1 554 "0x84"
d G "DAC_VREF_VREF" 1 555 "0x85"
d G "DAC_VSS_FVR" 1 556 "0x88"
d G "DAC_VREF_FVR" 1 557 "0x89"
d G "DAC_OUTPUT" 1 559 "0x20"
d G "DAC_LVP_POS" 1 560 "0x40"
d G "DAC_LVP_NEG" 1 561 "0"
c L "dac_write" 1 3 3 "FUNCTION"
f N "setup_lcd" 1 566 ""
v L "mode" 1 566 "int16" `240 
v L "prescale" 1 566 "int8" `241 
v L "segments" 1 566 "int32" `242 
f B "setup_lcd" 1 566 "void(int16 mode,int8 prescale,int32 segments)" `239 
f N "lcd_load" 1 567 ""
v L "buffer_pointer" 1 567 "*int8" `244 
v L "offset" 1 567 "int8" `245 
v L "length" 1 567 "int8" `246 
f B "lcd_load" 1 567 "void(*int8 buffer_pointer,int8 offset,int8 length)" `243 
f N "lcd_symbol" 1 568 ""
v L "symbol" 1 568 "int16" `248 
v L "b1_addr" 1 568 "int8" `249 
f B "lcd_symbol" 1 568 "void(int16 symbol,int8 b1_addr,*int8 _VA_LIST)" `247 
f N "lcd_contrast" 1 569 ""
v L "contrast" 1 569 "int8" `252 
f B "lcd_contrast" 1 569 "void(int8 contrast)" `251  "Constants used in setup_lcd() are:"
d G "LCD_STATIC" 1 573 "0x0000000080"
d G "LCD_MUX12" 1 574 "0x0000000081"
d G "LCD_MUX13" 1 575 "0x0000000082"
d G "LCD_MUX14" 1 576 "0x0000000083"
d G "LCD_DISABLED" 1 577 "0x0000000000"
d G "LCD_HALT_IDLE" 1 581 "0x0000000040"
d G "LCD_CONTINUE_IDLE" 1 582 "0x0000000000" "default"
d G "LCD_FOSC" 1 585 "0x0000000000" "default"
d G "LCD_TIMER1" 1 586 "0x0000000004"
d G "LCD_LFINTOSC" 1 587 "0x0000000008"
d G "LCD_TYPE_B" 1 590 "0x0000008000"
d G "LCD_TYPE_A" 1 591 "0x0000000000" "default"
d G "LCD_BIAS12" 1 594 "0x0000004000"
d G "LCD_BIAS13" 1 595 "0x0000000000" "default"
d G "LCD_REF_ENABLED" 1 598 "0x0000800000"
d G "LCD_REF_DISABLED" 1 599 "0x0000000000" "default"
d G "LCD_REF_VDD" 1 602 "0x0000000000" "default"
d G "LCD_REF_FVR" 1 603 "0x0000400000"
d G "LCD_FVR_DISABLED" 1 606 "0x0000200000"
d G "LCD_FVR_IGNORE" 1 607 "0x0000000000" "default"
d G "LCD_VOLTAGE3" 1 610 "0x0000080000"
d G "LCD_VOLTAGE2" 1 611 "0x0000040000"
d G "LCD_VOLTAGE1" 1 612 "0x0000020000"
d G "LCD_NO_VOLTAGE" 1 613 "0x0000000000" "default"
d G "LCD_A_NO_POWER" 1 616 "0x0000000000" "default"
d G "LCD_A_LOW_POWER" 1 617 "0x0040000000"
d G "LCD_A_MED_POWER" 1 618 "0x0080000000"
d G "LCD_A_HIGH_POWER" 1 619 "0x00C0000000"
d G "LCD_B_NO_POWER" 1 622 "0x0000000000" "default"
d G "LCD_B_LOW_POWER" 1 623 "0x0010000000"
d G "LCD_B_MED_POWER" 1 624 "0x0020000000"
d G "LCD_B_HIGH_POWER" 1 625 "0x0030000000"
d G "LCD_B_ONLY" 1 628 "0x0000000000" "default"
d G "LCD_A_CLOCK1" 1 629 "0x0001000000"
d G "LCD_A_CLOCK2" 1 630 "0x0002000000"
d G "LCD_A_CLOCK3" 1 631 "0x0003000000"
d G "LCD_A_CLOCK4" 1 632 "0x0004000000"
d G "LCD_A_CLOCK5" 1 633 "0x0005000000"
d G "LCD_A_CLOCK6" 1 634 "0x0006000000"
d G "LCD_A_CLOCK7" 1 635 "0x0007000000"
d G "COM0" 1 638 "0"
d G "COM1" 1 639 "24"
d G "COM2" 1 640 "48"
d G "COM3" 1 641 "72"
c L "lcd_contrast" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 646 ""
v L "mode" 1 646 "int8" `254 
f B "setup_oscillator" 1 646 "void(int8 mode)" `253  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 649 "0"
d G "OSC_31250" 1 650 " (2*8)"
d G "OSC_62KHZ" 1 651 " (4*8)"
d G "OSC_125KHZ" 1 652 " (5*8)"
d G "OSC_250KHZ" 1 653 " (6*8)"
d G "OSC_500KHZ" 1 654 " (7*8)"
d G "OSC_1MHZ" 1 655 " (11*8)"
d G "OSC_2MHZ" 1 656 " (12*8)"
d G "OSC_4MHZ" 1 657 " (13*8)"
d G "OSC_8MHZ" 1 658 " (14*8)"
d G "OSC_16MHZ" 1 659 " (15*8)"
d G "OSC_TIMER1" 1 661 "1"
d G "OSC_INTRC" 1 662 "2"
d G "OSC_NORMAL" 1 663 "0"
d G "OSC_PLL_ON" 1 665 "0x80"
d G "OSC_PLL_OFF" 1 666 "0"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 673 ""
v L "mode" 1 673 "int16" `256 
f B "setup_adc" 1 673 "void(int16 mode)" `255 
f N "read_adc" 1 674 ""
f B "read_adc" 1 674 "int8()" `257 
f N "read_adc" 1 675 ""
v L "mode" 1 675 "int8" `259 
f B "read_adc" 1 675 "int8(int8 mode)" `258 
f N "read_adc" 1 676 ""
f G "read_adc" 1 676 "int16()" `260 
f N "read_adc" 1 677 ""
v L "mode" 1 677 "int8" `261 
f G "read_adc" 1 677 "int16(int8 mode)" `260 
f N "adc_done" 1 678 ""
f B "adc_done" 1 678 "int8(int8 mode)" `260  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 680 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 681 "0x100"
d G "ADC_CLOCK_DIV_4" 1 682 "0x40"
d G "ADC_CLOCK_DIV_8" 1 683 "0x10"
d G "ADC_CLOCK_DIV_32" 1 684 "0x20"
d G "ADC_CLOCK_DIV_16" 1 685 "0x50"
d G "ADC_CLOCK_DIV_64" 1 686 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 687 "0x30" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 690 ""
v L "pins" 1 690 "int32" `262 
f B "setup_adc_ports" 1 690 "void(int32 pins)" `261 
f N "setup_adc_ports" 1 691 ""
v L "pins" 1 691 "int32" `264 
v L "reference" 1 691 "int32" `265 
f B "setup_adc_ports" 1 691 "void(int32 pins,int32 reference)" `263 
f N "set_analog_pins" 1 692 ""
v L "pin" 1 692 "int8" `267 
f B "set_analog_pins" 1 692 "void(int8 pin,*int8 _VA_LIST)" `266 
f N "setup_adc_reference" 1 693 ""
v L "reference" 1 693 "int32" `270 
f B "setup_adc_reference" 1 693 "void(int32 reference)" `269 
f N "set_adc_channel" 1 694 ""
v L "channel" 1 694 "int8" `272 
f B "set_adc_channel" 1 694 "void(int8 channel)" `271  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 698 "0x01000000" "| A0"
d G "sAN1" 1 699 "0x02000000" "| A1"
d G "sAN2" 1 700 "0x04000000" "| A2"
d G "sAN3" 1 701 "0x08000000" "| A3"
d G "sAN4" 1 702 "0x20000000" "| A5"
d G "sAN5" 1 703 "0x00010000" "| E0"
d G "sAN6" 1 704 "0x00020000" "| E1"
d G "sAN7" 1 705 "0x00040000" "| E2"
d G "sAN8" 1 706 "0x00000400" "| B2"
d G "sAN9" 1 707 "0x00000800" "| B3"
d G "sAN10" 1 708 "0x00000200" "| B1"
d G "sAN11" 1 709 "0x00001000" "| B4"
d G "sAN12" 1 710 "0x00000100" "| B0"
d G "sAN13" 1 711 "0x00002000" "| B5"
d G "NO_ANALOGS" 1 712 "0" "None"
d G "ALL_ANALOG" 1 713 "0x2F073F00" "A0 A1 A2 A3 A4 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 716 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 1 717 "0x02" "| Range 0-VrefH"
d G "VSS_FVR" 1 718 "0x03" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 1 719 "0x04" "| Range VrefL-Vdd"
d G "VREF_VREF" 1 720 "0x06" "| Range VrefL-VrefH"
d G "VREF_FVR" 1 721 "0x07" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 1 725 "0x1D"
d G "DAC_CHANNEL" 1 726 "0x1E"
d G "FVR_CHANNEL" 1 727 "0x1F"
d G "ADC_START_AND_READ" 1 730 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 731 "1"
d G "ADC_READ_ONLY" 1 732 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 738 ""
v L "x" 1 738 "sint8" `274 
f B "abs" 1 738 "sint8(sint8 x)" `273 
f N "abs" 1 739 ""
v L "x" 1 739 "sint16" `276 
f B "abs" 1 739 "sint16(sint16 x)" `275 
f N "abs" 1 740 ""
v L "x" 1 740 "sint32" `278 
f B "abs" 1 740 "sint32(sint32 x)" `277 
f N "abs" 1 741 ""
v L "x" 1 741 "float" `280 
f B "abs" 1 741 "float(float x)" `279 
f N "_mul" 1 742 ""
v L "??65535" 1 742 "int8" `282 
v L "??65535" 1 742 "int8" `283 
f B "_mul" 1 742 "int16(int8 ,int8 )" `281 
f N "_mul" 1 743 ""
v L "??65535" 1 743 "sint8" `285 
v L "??65535" 1 743 "sint8" `286 
f B "_mul" 1 743 "sint16(sint8 ,sint8 )" `284 
f N "_mul" 1 744 ""
v L "??65535" 1 744 "int16" `288 
v L "??65535" 1 744 "int16" `289 
f B "_mul" 1 744 "int32(int16 ,int16 )" `287 
f N "_mul" 1 745 ""
v L "??65535" 1 745 "sint16" `291 
v L "??65535" 1 745 "sint16" `292 
f B "_mul" 1 745 "sint32(sint16 ,sint16 )" `290  "Memory Manipulation Prototypes:"
f N "read_bank" 1 748 ""
v L "bank" 1 748 "int8" `294 
v L "offset" 1 748 "int8" `295 
f B "read_bank" 1 748 "int8(int8 bank,int8 offset)" `293 
f N "write_bank" 1 749 ""
v L "bank" 1 749 "int8" `297 
v L "offset" 1 749 "int8" `298 
v L "value" 1 749 "int8" `299 
f B "write_bank" 1 749 "void(int8 bank,int8 offset,int8 value)" `296 
f N "strcpy" 1 750 ""
v L "dest" 1 750 "*int8" `301 
v L "src" 1 750 "*int8" `302 
f B "strcpy" 1 750 "void(*int8 dest,*int8 src)" `300 
f N "memset" 1 751 ""
v L "destination" 1 751 "*int8" `304 
v L "value" 1 751 "int8" `305 
v L "num" 1 751 "int16" `306 
f B "memset" 1 751 "void(*int8 destination,int8 value,int16 num)" `303 
f N "memcpy" 1 752 ""
v L "destination" 1 752 "*int8" `308 
v L "source" 1 752 "*int8" `309 
v L "num" 1 752 "int16" `310 
f B "memcpy" 1 752 "void(*int8 destination,*int8 source,int16 num)" `307  "String Prototypes:"
f N "toupper" 1 755 ""
v L "cvalue" 1 755 "int8" `312 
f B "toupper" 1 755 "int8(int8 cvalue)" `311 
f N "tolower" 1 756 ""
v L "cvalue" 1 756 "int8" `314 
f B "tolower" 1 756 "int8(int8 cvalue)" `313 
f N "sprintf" 1 757 ""
v L "string" 1 757 "*int8" `316 
v L "cstring" 1 757 "*int8" `317 
f B "sprintf" 1 757 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `315  "Data Manipulators Prototypes:"
f N "shift_left" 1 760 ""
v L "address" 1 760 "*int8" `320 
v L "bytes" 1 760 "int8" `321 
v L "value" 1 760 "int8" `322 
f B "shift_left" 1 760 "int8(*int8 address,int8 bytes,int8 value)" `319 
f N "shift_right" 1 761 ""
v L "address" 1 761 "*int8" `324 
v L "bytes" 1 761 "int8" `325 
v L "value" 1 761 "int8" `326 
f B "shift_right" 1 761 "int8(*int8 address,int8 bytes,int8 value)" `323 
f N "rotate_left" 1 762 ""
v L "address" 1 762 "*int8" `328 
v L "bytes" 1 762 "int8" `329 
f B "rotate_left" 1 762 "void(*int8 address,int8 bytes)" `327 
f N "rotate_right" 1 763 ""
v L "address" 1 763 "*int8" `331 
v L "bytes" 1 763 "int8" `332 
f B "rotate_right" 1 763 "void(*int8 address,int8 bytes)" `330 
f N "swap" 1 764 ""
v L "value" 1 764 "int8" `334 
f B "swap" 1 764 "void(int8 value)" `333 
f N "make8" 1 765 ""
v L "var" 1 765 "int16" `336 
v L "offset" 1 765 "int8" `337 
f B "make8" 1 765 "int8(int16 var,int8 offset)" `335 
f N "make8" 1 766 ""
v L "var" 1 766 "int32" `339 
v L "offset" 1 766 "int8" `340 
f B "make8" 1 766 "int8(int32 var,int8 offset)" `338 
f N "make16" 1 767 ""
v L "varhigh" 1 767 "int8" `342 
v L "varlow" 1 767 "int8" `343 
f B "make16" 1 767 "int16(int8 varhigh,int8 varlow)" `341 
f N "make32" 1 768 ""
v L "var1" 1 768 "int16" `345 
f B "make32" 1 768 "int32(int16 var1)" `344 
f N "make32" 1 769 ""
v L "var1" 1 769 "int16" `347 
v L "var2" 1 769 "int16" `348 
f B "make32" 1 769 "int32(int16 var1,int16 var2)" `346 
f N "make32" 1 770 ""
v L "var1" 1 770 "int16" `350 
v L "var2" 1 770 "int8" `351 
f B "make32" 1 770 "int32(int16 var1,int8 var2)" `349 
f N "make32" 1 771 ""
v L "var1" 1 771 "int16" `353 
v L "var2" 1 771 "int8" `354 
v L "var3" 1 771 "int8" `355 
f B "make32" 1 771 "int32(int16 var1,int8 var2,int8 var3)" `352 
f N "make32" 1 772 ""
v L "var1" 1 772 "int8" `357 
f B "make32" 1 772 "int32(int8 var1)" `356 
f N "make32" 1 773 ""
v L "var1" 1 773 "int8" `359 
v L "var2" 1 773 "int8" `360 
f B "make32" 1 773 "int32(int8 var1,int8 var2)" `358 
f N "make32" 1 774 ""
v L "var1" 1 774 "int8" `362 
v L "var2" 1 774 "int8" `363 
v L "var3" 1 774 "int8" `364 
f B "make32" 1 774 "int32(int8 var1,int8 var2,int8 var3)" `361 
f N "make32" 1 775 ""
v L "var1" 1 775 "int8" `366 
v L "var2" 1 775 "int8" `367 
v L "var3" 1 775 "int8" `368 
v L "var4" 1 775 "int8" `369 
f B "make32" 1 775 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `365 
f N "make32" 1 776 ""
v L "var1" 1 776 "int8" `371 
v L "var2" 1 776 "int16" `372 
f B "make32" 1 776 "int32(int8 var1,int16 var2)" `370 
f N "make32" 1 777 ""
v L "var1" 1 777 "int8" `374 
v L "var2" 1 777 "int16" `375 
v L "var3" 1 777 "int8" `376 
f B "make32" 1 777 "int32(int8 var1,int16 var2,int8 var3)" `373 
f N "make32" 1 778 ""
v L "var1" 1 778 "int8" `378 
v L "var2" 1 778 "int8" `379 
v L "var3" 1 778 "int16" `380 
f B "make32" 1 778 "int32(int8 var1,int8 var2,int16 var3)" `377 
f N "bit_set" 1 779 ""
v L "var" 1 779 "int8" `382 
v L "bit" 1 779 "int8" `383 
f B "bit_set" 1 779 "void(int8 var,int8 bit)" `381 
f N "bit_set" 1 780 ""
v L "var" 1 780 "int16" `385 
v L "bit" 1 780 "int8" `386 
f B "bit_set" 1 780 "void(int16 var,int8 bit)" `384 
f N "bit_set" 1 781 ""
v L "var" 1 781 "int32" `388 
v L "bit" 1 781 "int8" `389 
f B "bit_set" 1 781 "void(int32 var,int8 bit)" `387 
f N "bit_clear" 1 782 ""
v L "var" 1 782 "int8" `391 
v L "bit" 1 782 "int8" `392 
f B "bit_clear" 1 782 "void(int8 var,int8 bit)" `390 
f N "bit_clear" 1 783 ""
v L "var" 1 783 "int16" `394 
v L "bit" 1 783 "int8" `395 
f B "bit_clear" 1 783 "void(int16 var,int8 bit)" `393 
f N "bit_clear" 1 784 ""
v L "var" 1 784 "int32" `397 
v L "bit" 1 784 "int8" `398 
f B "bit_clear" 1 784 "void(int32 var,int8 bit)" `396 
f N "bit_test" 1 785 ""
v L "var" 1 785 "int8" `400 
v L "bit" 1 785 "int8" `401 
f B "bit_test" 1 785 "int8(int8 var,int8 bit)" `399 
f N "bit_test" 1 786 ""
v L "var" 1 786 "int16" `403 
v L "bit" 1 786 "int8" `404 
f B "bit_test" 1 786 "int8(int16 var,int8 bit)" `402 
f N "bit_test" 1 787 ""
v L "var" 1 787 "int32" `406 
v L "bit" 1 787 "int8" `407 
f B "bit_test" 1 787 "int8(int32 var,int8 bit)" `405  "#use delay() Prototypes:"
f N "delay_cycles" 1 790 ""
v L "count" 1 790 "int8" `409 
f B "delay_cycles" 1 790 "void(int8 count)" `408 
f N "delay_ms" 1 791 ""
v L "time" 1 791 "int16" `411 
f B "delay_ms" 1 791 "void(int16 time)" `410 
f N "delay_us" 1 792 ""
v L "time" 1 792 "int16" `413 
f B "delay_us" 1 792 "void(int16 time)" `412  "#use rs232() Prototypes:"
f N "putchar" 1 795 ""
v L "cdata" 1 795 "int8" `415 
f B "putchar" 1 795 "void(int8 cdata)" `414 
f N "putchar" 1 796 ""
v L "cdata" 1 796 "int8" `417 
v L "stream" 1 796 "int8" `418 
f B "putchar" 1 796 "void(int8 cdata,int8 stream)" `416 
f N "puts" 1 797 ""
v L "string" 1 797 "*int8" `420 
f B "puts" 1 797 "void(*int8 string)" `419 
f N "puts" 1 798 ""
v L "string" 1 798 "*int8" `422 
v L "stream" 1 798 "int8" `423 
f B "puts" 1 798 "void(*int8 string,int8 stream)" `421 
f N "getch" 1 799 ""
f B "getch" 1 799 "int8()" `424 
f N "getch" 1 800 ""
v L "stream" 1 800 "int8" `426 
f B "getch" 1 800 "int8(int8 stream)" `425 
f N "gets" 1 801 ""
v L "string" 1 801 "*int8" `428 
f B "gets" 1 801 "void(*int8 string)" `427 
f N "gets" 1 802 ""
v L "string" 1 802 "*int8" `430 
v L "stream" 1 802 "int8" `431 
f B "gets" 1 802 "void(*int8 string,int8 stream)" `429 
f N "kbhit" 1 803 ""
f B "kbhit" 1 803 "int8()" `432 
f N "kbhit" 1 804 ""
v L "stream" 1 804 "int8" `434 
f B "kbhit" 1 804 "int8(int8 stream)" `433 
f N "printf" 1 805 ""
v L "string" 1 805 "*int8" `436 
f B "printf" 1 805 "void(*int8 string,*int8 _VA_LIST)" `435 
f N "fprintf" 1 806 ""
v L "stream" 1 806 "int8" `439 
v L "string" 1 806 "*int8" `440 
f B "fprintf" 1 806 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `438 
f N "putc_send" 1 807 ""
f B "putc_send" 1 807 "void()" `442 
f N "fputc_send" 1 808 ""
v L "stream" 1 808 "int8" `444 
f B "fputc_send" 1 808 "void(int8 stream)" `443 
f N "rcv_buffer_full" 1 809 ""
f B "rcv_buffer_full" 1 809 "int8()" `445 
f N "rcv_buffer_full" 1 810 ""
v L "stream" 1 810 "int8" `447 
f B "rcv_buffer_full" 1 810 "int8(int8 stream)" `446 
f N "rcv_buffer_bytes" 1 811 ""
f B "rcv_buffer_bytes" 1 811 "int16()" `448 
f N "rcv_buffer_bytes" 1 812 ""
v L "stream" 1 812 "int8" `450 
f B "rcv_buffer_bytes" 1 812 "int16(int8 stream)" `449 
f N "tx_buffer_full" 1 813 ""
f B "tx_buffer_full" 1 813 "int8()" `451 
f N "tx_buffer_full" 1 814 ""
v L "stream" 1 814 "int8" `453 
f B "tx_buffer_full" 1 814 "int8(int8 stream)" `452 
f N "tx_buffer_bytes" 1 815 ""
f B "tx_buffer_bytes" 1 815 "int16()" `454 
f N "tx_buffer_bytes" 1 816 ""
v L "stream" 1 816 "int8" `456 
f B "tx_buffer_bytes" 1 816 "int16(int8 stream)" `455  "#use i2c() Prototypes:"
f N "i2c_read" 1 819 ""
f B "i2c_read" 1 819 "int8()" `457 
f N "i2c_read" 1 820 ""
v L "ack" 1 820 "int8" `459 
f B "i2c_read" 1 820 "int8(int8 ack)" `458 
f N "i2c_read" 1 821 ""
v L "stream" 1 821 "int8" `461 
v L "ack" 1 821 "int8" `462 
f B "i2c_read" 1 821 "int8(int8 stream,int8 ack)" `460 
f N "i2c_write" 1 822 ""
v L "data" 1 822 "int8" `464 
f B "i2c_write" 1 822 "int8(int8 data)" `463 
f N "i2c_write" 1 823 ""
v L "stream" 1 823 "int8" `466 
v L "data" 1 823 "int8" `467 
f B "i2c_write" 1 823 "int8(int8 stream,int8 data)" `465 
f N "i2c_start" 1 824 ""
f B "i2c_start" 1 824 "void()" `468 
f N "i2c_start" 1 825 ""
v L "stream" 1 825 "int8" `470 
f B "i2c_start" 1 825 "void(int8 stream)" `469 
f N "i2c_start" 1 826 ""
v L "stream" 1 826 "int8" `472 
v L "restart" 1 826 "int8" `473 
f B "i2c_start" 1 826 "void(int8 stream,int8 restart)" `471 
f N "i2c_stop" 1 827 ""
f B "i2c_stop" 1 827 "void()" `474 
f N "i2c_stop" 1 828 ""
v L "stream" 1 828 "int8" `476 
f B "i2c_stop" 1 828 "void(int8 stream)" `475 
f N "i2c_isr_state" 1 829 ""
f B "i2c_isr_state" 1 829 "int8()" `477 
f N "i2c_slaveaddr" 1 830 ""
v L "addr" 1 830 "int8" `479 
f B "i2c_slaveaddr" 1 830 "void(int8 addr)" `478 
f N "i2c_slaveaddr" 1 831 ""
v L "stream" 1 831 "int8" `481 
v L "addr" 1 831 "int8" `482 
f B "i2c_slaveaddr" 1 831 "void(int8 stream,int8 addr)" `480 
f N "i2c_poll" 1 832 ""
f B "i2c_poll" 1 832 "int8()" `483 
f N "i2c_poll" 1 833 ""
v L "stream" 1 833 "int8" `485 
f B "i2c_poll" 1 833 "int8(int8 stream)" `484 
f N "i2c_init" 1 834 ""
v L "baud" 1 834 "int32" `487 
f B "i2c_init" 1 834 "void(int32 baud)" `486 
f N "i2c_init" 1 835 ""
v L "stream" 1 835 "int8" `489 
v L "baud" 1 835 "int32" `490 
f B "i2c_init" 1 835 "void(int8 stream,int32 baud)" `488 
f N "i2c_transfer" 1 836 ""
v L "address" 1 836 "int8" `492 
v L "wData" 1 836 "*int8" `493 
v L "wCount" 1 836 "int8" `494 
f B "i2c_transfer" 1 836 "void(int8 address,*int8 wData,int8 wCount)" `491 
f N "i2c_transfer" 1 837 ""
v L "address" 1 837 "int8" `496 
v L "wData" 1 837 "*int8" `497 
v L "wCount" 1 837 "int8" `498 
v L "rData" 1 837 "*int8" `499 
v L "rCount" 1 837 "*int8" `500 
f B "i2c_transfer" 1 837 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `495 
f N "i2c_transfer" 1 838 ""
v L "stream" 1 838 "int8" `502 
v L "address" 1 838 "int8" `503 
v L "wData" 1 838 "*int8" `504 
v L "wCount" 1 838 "int8" `505 
f B "i2c_transfer" 1 838 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `501 
f N "i2c_transfer" 1 839 ""
v L "stream" 1 839 "int8" `507 
v L "address" 1 839 "int8" `508 
v L "wData" 1 839 "*int8" `509 
v L "wCount" 1 839 "int8" `510 
v L "rData" 1 839 "*int8" `511 
v L "rCount" 1 839 "*int8" `512 
f B "i2c_transfer" 1 839 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `506 
f N "i2c_transfer_out" 1 840 ""
v L "address" 1 840 "int8" `514 
v L "wData" 1 840 "*int8" `515 
v L "wCount" 1 840 "int8" `516 
f B "i2c_transfer_out" 1 840 "void(int8 address,*int8 wData,int8 wCount)" `513 
f N "i2c_transfer_out" 1 841 ""
v L "stream" 1 841 "int8" `518 
v L "address" 1 841 "int8" `519 
v L "wData" 1 841 "*int8" `520 
v L "wCount" 1 841 "int8" `521 
f B "i2c_transfer_out" 1 841 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `517 
f N "i2c_transfer_in" 1 842 ""
v L "address" 1 842 "int8" `523 
v L "rData" 1 842 "*int8" `524 
v L "rCount" 1 842 "int8" `525 
f B "i2c_transfer_in" 1 842 "void(int8 address,*int8 rData,int8 rCount)" `522 
f N "i2c_transfer_in" 1 843 ""
v L "stream" 1 843 "int8" `527 
v L "address" 1 843 "int8" `528 
v L "rData" 1 843 "*int8" `529 
v L "rCount" 1 843 "int8" `530 
f B "i2c_transfer_in" 1 843 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `526  "#use spi() Prototypes:"
f N "spi_xfer" 1 846 ""
f B "spi_xfer" 1 846 "int8()" `531 
f N "spi_xfer" 1 847 ""
f G "spi_xfer" 1 847 "int16()" `532 
f N "spi_xfer" 1 848 ""
f G "spi_xfer" 1 848 "int32()" `532 
f N "spi_xfer" 1 849 ""
v L "data" 1 849 "int8" `533 
f B "spi_xfer" 1 849 "int8(int8 data)" `532 
f N "spi_xfer" 1 850 ""
v L "data" 1 850 "int16" `535 
f B "spi_xfer" 1 850 "int16(int16 data)" `534 
f N "spi_xfer" 1 851 ""
v L "data" 1 851 "int32" `537 
f B "spi_xfer" 1 851 "int32(int32 data)" `536 
f N "spi_xfer" 1 852 ""
v L "stream" 1 852 "int8" `539 
v L "data" 1 852 "int8" `540 
f B "spi_xfer" 1 852 "int8(int8 stream,int8 data)" `538 
f N "spi_xfer" 1 853 ""
v L "stream" 1 853 "int8" `542 
v L "data" 1 853 "int16" `543 
f B "spi_xfer" 1 853 "int16(int8 stream,int16 data)" `541 
f N "spi_xfer" 1 854 ""
v L "stream" 1 854 "int8" `545 
v L "data" 1 854 "int32" `546 
f B "spi_xfer" 1 854 "int32(int8 stream,int32 data)" `544 
f N "spi_xfer" 1 855 ""
v L "stream" 1 855 "int8" `548 
v L "data" 1 855 "int8" `549 
v L "bits" 1 855 "int8" `550 
f B "spi_xfer" 1 855 "int8(int8 stream,int8 data,int8 bits)" `547 
f N "spi_xfer" 1 856 ""
v L "stream" 1 856 "int8" `552 
v L "data" 1 856 "int16" `553 
v L "bits" 1 856 "int8" `554 
f B "spi_xfer" 1 856 "int16(int8 stream,int16 data,int8 bits)" `551 
f N "spi_xfer" 1 857 ""
v L "stream" 1 857 "int8" `556 
v L "data" 1 857 "int32" `557 
v L "bits" 1 857 "int8" `558 
f B "spi_xfer" 1 857 "int32(int8 stream,int32 data,int8 bits)" `555 
f N "spi_init" 1 858 ""
v L "baud" 1 858 "int32" `560 
f B "spi_init" 1 858 "void(int32 baud)" `559 
f N "spi_init" 1 859 ""
v L "stream" 1 859 "int8" `562 
v L "baud" 1 859 "int32" `563 
f B "spi_init" 1 859 "void(int8 stream,int32 baud)" `561 
f N "spi_speed" 1 860 ""
v L "baud" 1 860 "int32" `565 
f B "spi_speed" 1 860 "void(int32 baud)" `564 
f N "spi_speed" 1 861 ""
v L "stream" 1 861 "int8" `567 
v L "baud" 1 861 "int32" `568 
f B "spi_speed" 1 861 "void(int8 stream,int32 baud)" `566 
f N "spi_speed" 1 862 ""
v L "stream" 1 862 "int8" `570 
v L "baud" 1 862 "int32" `571 
v L "clock" 1 862 "int32" `572 
f B "spi_speed" 1 862 "void(int8 stream,int32 baud,int32 clock)" `569 
f N "spi_prewrite" 1 863 ""
v L "data" 1 863 "int8" `574 
f B "spi_prewrite" 1 863 "void(int8 data)" `573 
f N "spi_prewrite" 1 864 ""
v L "data" 1 864 "int16" `576 
f B "spi_prewrite" 1 864 "void(int16 data)" `575 
f N "spi_prewrite" 1 865 ""
v L "data" 1 865 "int32" `578 
f B "spi_prewrite" 1 865 "void(int32 data)" `577 
f N "spi_prewrite" 1 866 ""
v L "??65535" 1 866 "int8" `580 
v L "data" 1 866 "int8" `581 
f B "spi_prewrite" 1 866 "void(int8 ,int8 data)" `579 
f N "spi_prewrite" 1 867 ""
v L "??65535" 1 867 "int8" `583 
v L "data" 1 867 "int16" `584 
f B "spi_prewrite" 1 867 "void(int8 ,int16 data)" `582 
f N "spi_prewrite" 1 868 ""
v L "??65535" 1 868 "int8" `586 
v L "data" 1 868 "int32" `587 
f B "spi_prewrite" 1 868 "void(int8 ,int32 data)" `585 
f N "spi_xfer_in" 1 869 ""
f B "spi_xfer_in" 1 869 "int8()" `588 
f N "spi_xfer_in" 1 870 ""
f G "spi_xfer_in" 1 870 "int16()" `589 
f N "spi_xfer_in" 1 871 ""
f G "spi_xfer_in" 1 871 "int32()" `589 
f N "spi_xfer_in" 1 872 ""
v L "bits" 1 872 "int8" `590 
f B "spi_xfer_in" 1 872 "int8(int8 bits)" `589 
f N "spi_xfer_in" 1 873 ""
v L "bits" 1 873 "int8" `592 
f G "spi_xfer_in" 1 873 "int16(int8 bits)" `591 
f N "spi_xfer_in" 1 874 ""
v L "bits" 1 874 "int8" `592 
f G "spi_xfer_in" 1 874 "int32(int8 bits)" `591 
f N "spi_xfer_in" 1 875 ""
v L "stream" 1 875 "int8" `592 
v L "bits" 1 875 "int8" `593 
f B "spi_xfer_in" 1 875 "int8(int8 stream,int8 bits)" `591 
f N "spi_xfer_in" 1 876 ""
v L "stream" 1 876 "int8" `592 
v L "bits" 1 876 "int8" `596 
f G "spi_xfer_in" 1 876 "int16(int8 stream,int8 bits)" `594 
f N "spi_xfer_in" 1 877 ""
v L "stream" 1 877 "int8" `592 
v L "bits" 1 877 "int8" `596 
f G "spi_xfer_in" 1 877 "int32(int8 stream,int8 bits)" `594  "#use rtos() Prototypes:"
f N "rtos_run" 1 880 ""
f B "rtos_run" 1 880 "void(int8 stream,int8 bits)" `594 
f N "rtos_yield" 1 881 ""
f B "rtos_yield" 1 881 "void(int8 bits)" `595 
f N "rtos_enable" 1 882 ""
v L "task" 1 882 "int8" `597 
f B "rtos_enable" 1 882 "void(int8 task)" `596 
f N "rtos_disable" 1 883 ""
v L "task" 1 883 "int8" `599 
f B "rtos_disable" 1 883 "void(int8 task)" `598 
f N "rtos_terminate" 1 884 ""
f B "rtos_terminate" 1 884 "void()" `600 
f N "rtos_await" 1 885 ""
v L "flag" 1 885 "int8" `602 
f B "rtos_await" 1 885 "void(int8 flag)" `601 
f N "rtos_wait" 1 886 ""
v L "sem" 1 886 "int8" `604 
f B "rtos_wait" 1 886 "void(int8 sem)" `603 
f N "rtos_signal" 1 887 ""
v L "sem" 1 887 "int8" `606 
f B "rtos_signal" 1 887 "void(int8 sem)" `605 
f N "rtos_msg_send" 1 888 ""
v L "task" 1 888 "int8" `608 
v L "msg" 1 888 "int8" `609 
f B "rtos_msg_send" 1 888 "void(int8 task,int8 msg)" `607 
f N "rtos_msg_read" 1 889 ""
f B "rtos_msg_read" 1 889 "int8()" `610 
f N "rtos_msg_poll" 1 890 ""
f B "rtos_msg_poll" 1 890 "int8()" `611 
f N "rtos_overrun" 1 891 ""
v L "task" 1 891 "int8" `613 
f B "rtos_overrun" 1 891 "int8(int8 task)" `612 
f N "rtos_stats" 1 892 ""
v L "task" 1 892 "int8" `615 
v L "stat" 1 892 "*int8" `616 
f B "rtos_stats" 1 892 "void(int8 task,*int8 stat)" `614  "#use timer() Prototypes:"
f N "get_ticks" 1 895 ""
f B "get_ticks" 1 895 "int8()" `617 
f N "get_ticks" 1 896 ""
f G "get_ticks" 1 896 "int16()" `618 
f N "get_ticks" 1 897 ""
f G "get_ticks" 1 897 "int32()" `618 
f N "get_ticks" 1 898 ""
v L "stream" 1 898 "int8" `619 
f B "get_ticks" 1 898 "int8(int8 stream)" `618 
f N "get_ticks" 1 899 ""
v L "stream" 1 899 "int8" `621 
f G "get_ticks" 1 899 "int16(int8 stream)" `620 
f N "get_ticks" 1 900 ""
v L "stream" 1 900 "int8" `621 
f G "get_ticks" 1 900 "int32(int8 stream)" `620 
f N "set_ticks" 1 901 ""
v L "value" 1 901 "int8" `621 
f B "set_ticks" 1 901 "void(int8 value)" `620 
f N "set_ticks" 1 902 ""
v L "value" 1 902 "int16" `623 
f B "set_ticks" 1 902 "void(int16 value)" `622 
f N "set_ticks" 1 903 ""
v L "value" 1 903 "int32" `625 
f B "set_ticks" 1 903 "void(int32 value)" `624 
f N "set_ticks" 1 904 ""
v L "stream" 1 904 "int8" `627 
v L "value" 1 904 "int8" `628 
f B "set_ticks" 1 904 "void(int8 stream,int8 value)" `626 
f N "set_ticks" 1 905 ""
v L "stream" 1 905 "int8" `630 
v L "value" 1 905 "int16" `631 
f B "set_ticks" 1 905 "void(int8 stream,int16 value)" `629 
f N "set_ticks" 1 906 ""
v L "stream" 1 906 "int8" `633 
v L "value" 1 906 "int32" `634 
f B "set_ticks" 1 906 "void(int8 stream,int32 value)" `632  "#use pwm() Prototypes:"
f N "pwm_on" 1 909 ""
f B "pwm_on" 1 909 "void()" `635 
f N "pwm_on" 1 910 ""
v L "stream" 1 910 "int8" `637 
f B "pwm_on" 1 910 "void(int8 stream)" `636 
f N "pwm_off" 1 911 ""
f B "pwm_off" 1 911 "void()" `638 
f N "pwm_off" 1 912 ""
v L "stream" 1 912 "int8" `640 
f B "pwm_off" 1 912 "void(int8 stream)" `639 
f N "pwm_set_duty" 1 913 ""
v L "duty" 1 913 "int16" `642 
f B "pwm_set_duty" 1 913 "void(int16 duty)" `641 
f N "pwm_set_duty" 1 914 ""
v L "stream" 1 914 "int8" `644 
v L "duty" 1 914 "int16" `645 
f B "pwm_set_duty" 1 914 "void(int8 stream,int16 duty)" `643 
f N "pwm_set_duty_percent" 1 915 ""
v L "percent" 1 915 "int16" `647 
f B "pwm_set_duty_percent" 1 915 "void(int16 percent)" `646 
f N "pwm_set_duty_percent" 1 916 ""
v L "stream" 1 916 "int8" `649 
v L "percent" 1 916 "int16" `650 
f B "pwm_set_duty_percent" 1 916 "void(int8 stream,int16 percent)" `648 
f N "pwm_set_frequency" 1 917 ""
v L "frequency" 1 917 "int32" `652 
f B "pwm_set_frequency" 1 917 "void(int32 frequency)" `651 
f N "pwm_set_frequency" 1 918 ""
v L "stream" 1 918 "int8" `654 
v L "frequency" 1 918 "int32" `655 
f B "pwm_set_frequency" 1 918 "void(int8 stream,int32 frequency)" `653  "#use capture() Prototypes:"
f N "get_capture_time" 1 921 ""
f B "get_capture_time" 1 921 "int16()" `656 
f N "get_capture_time" 1 922 ""
v L "stream" 1 922 "int8" `658 
f B "get_capture_time" 1 922 "int16(int8 stream)" `657 
f N "get_capture_event" 1 923 ""
f B "get_capture_event" 1 923 "int8()" `659 
f N "get_capture_event" 1 924 ""
v L "stream" 1 924 "int8" `661 
f B "get_capture_event" 1 924 "int8(int8 stream)" `660  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 937 ""
v L "address" 1 937 "int16" `663 
f B "goto_address" 1 937 "void(int16 address)" `662 
f N "label_address" 1 938 ""
v L "label" 1 938 "int16" `665 
f B "label_address" 1 938 "int16(int16 label)" `664  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 941 ""
v L "address" 1 941 "int16" `667 
v L "dataptr" 1 941 "*int8" `668 
v L "count" 1 941 "int16" `669 
f B "read_program_memory" 1 941 "void(int16 address,*int8 dataptr,int16 count)" `666 
f N "read_program_eeprom" 1 942 ""
v L "address" 1 942 "int16" `671 
f B "read_program_eeprom" 1 942 "int16(int16 address)" `670 
f N "read_configuration_memory" 1 943 ""
v L "dataptr" 1 943 "*int8" `673 
v L "count" 1 943 "int8" `674 
f B "read_configuration_memory" 1 943 "void(*int8 dataptr,int8 count)" `672 
f N "read_configuration_memory" 1 944 ""
v L "offset" 1 944 "int8" `676 
v L "dataptr" 1 944 "*int8" `677 
v L "count" 1 944 "int8" `678 
f B "read_configuration_memory" 1 944 "void(int8 offset,*int8 dataptr,int8 count)" `675  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 1 947 ""
v L "address" 1 947 "int16" `680 
f B "erase_program_eeprom" 1 947 "void(int16 address)" `679 
f N "write_program_memory" 1 948 ""
v L "address" 1 948 "int16" `682 
v L "dataptr" 1 948 "*int8" `683 
v L "count" 1 948 "int16" `684 
f B "write_program_memory" 1 948 "void(int16 address,*int8 dataptr,int16 count)" `681 
f N "write_program_eeprom" 1 949 ""
v L "address" 1 949 "int16" `686 
v L "data" 1 949 "int16" `687 
f B "write_program_eeprom" 1 949 "void(int16 address,int16 data)" `685 
f N "write_configuration_memory" 1 950 ""
v L "dataptr" 1 950 "*int8" `689 
v L "count" 1 950 "int8" `690 
f B "write_configuration_memory" 1 950 "void(*int8 dataptr,int8 count)" `688 
f N "write_configuration_memory" 1 951 ""
v L "offset" 1 951 "int8" `692 
v L "dataptr" 1 951 "*int8" `693 
v L "count" 1 951 "int8" `694 
f B "write_configuration_memory" 1 951 "void(int8 offset,*int8 dataptr,int8 count)" `691  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 958 "unsigned int8"
f N "read_eeprom" 1 961 ""
v L "address" 1 961 "int8" `696 
f B "read_eeprom" 1 961 "int8(int8 address)" `695 
f N "write_eeprom" 1 962 ""
v L "address" 1 962 "int8" `698 
v L "value" 1 962 "int8" `699 
f B "write_eeprom" 1 962 "void(int8 address,int8 value)" `697  "#use touchpad() Prototypes:"
f N "touchpad_state" 1 965 ""
v L "state" 1 965 "int8" `701 
f B "touchpad_state" 1 965 "void(int8 state)" `700 
f N "touchpad_getc" 1 966 ""
f B "touchpad_getc" 1 966 "int8()" `702 
f N "touchpad_hit" 1 967 ""
f B "touchpad_hit" 1 967 "int8()" `703  "INT"
c L "touchpad_hit" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 973 ""
v L "interrupt" 1 973 "int32" `705 
f B "enable_interrupts" 1 973 "void(int32 interrupt)" `704 
f N "disable_interrupts" 1 974 ""
v L "interrupt" 1 974 "int32" `707 
f B "disable_interrupts" 1 974 "void(int32 interrupt)" `706 
f N "clear_interrupt" 1 975 ""
v L "interrupt" 1 975 "int32" `709 
f B "clear_interrupt" 1 975 "void(int32 interrupt)" `708 
f N "interrupt_active" 1 976 ""
v L "interrupt" 1 976 "int32" `711 
f B "interrupt_active" 1 976 "int8(int32 interrupt)" `710 
f N "interrupt_enabled" 1 977 ""
v L "interrupt" 1 977 "int32" `713 
f B "interrupt_enabled" 1 977 "int8(int32 interrupt)" `712 
f N "ext_int_edge" 1 978 ""
v L "source" 1 978 "int8" `715 
v L "edge" 1 978 "int8" `716 
f B "ext_int_edge" 1 978 "void(int8 source,int8 edge)" `714 
f N "jump_to_isr" 1 979 ""
v L "address" 1 979 "int16" `718 
f B "jump_to_isr" 1 979 "void(int16 address)" `717  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 981 "0x40"
d G "H_TO_L" 1 982 "0"
d G "GLOBAL" 1 984 "0x0BC0"
d G "PERIPH" 1 985 "0x0B40"
d G "INT_EXT_L2H" 1 986 "0x50000B10"
d G "INT_EXT_H2L" 1 987 "0x60000B10"
d G "INT_EXT" 1 988 "0x300B10"
d G "INT_TIMER0" 1 989 "0x300B20"
d G "INT_TIMER1" 1 990 "0x309101"
d G "INT_TIMER2" 1 991 "0x309102"
d G "INT_CCP1" 1 992 "0x309104"
d G "INT_SSP" 1 993 "0x309108"
d G "INT_TBE" 1 994 "0x309110"
d G "INT_RDA" 1 995 "0x309120"
d G "INT_AD" 1 996 "0x309140"
d G "INT_TIMER1_GATE" 1 997 "0x309180"
d G "INT_LCD" 1 998 "0x309204"
d G "INT_BUSCOL" 1 999 "0x309208"
d G "INT_EEPROM" 1 1000 "0x309210"
d G "INT_COMP" 1 1001 "0x309220"
d G "INT_COMP2" 1 1002 "0x309240"
d G "INT_OSC_FAIL" 1 1003 "0x309280"
d G "INT_TIMER4" 1 1004 "0x309302"
d G "INT_TIMER6" 1 1005 "0x309308"
d G "INT_CCP3" 1 1006 "0x309310"
d G "INT_CCP4" 1 1007 "0x309320"
d G "INT_CCP5" 1 1008 "0x309340"
d G "INT_CCP2" 1 1009 "0x309201"
d G "INT_IOC" 1 1010 "0x3FFF0B08"
d G "INT_IOC_B0" 1 1011 "0x31010B08"
d G "INT_IOC_B0_L2H" 1 1012 "0x11010B08"
d G "INT_IOC_B0_H2L" 1 1013 "0x21010B08"
d G "INT_IOC_B1" 1 1014 "0x31020B08"
d G "INT_IOC_B1_L2H" 1 1015 "0x11020B08"
d G "INT_IOC_B1_H2L" 1 1016 "0x21020B08"
d G "INT_IOC_B2" 1 1017 "0x31040B08"
d G "INT_IOC_B2_L2H" 1 1018 "0x11040B08"
d G "INT_IOC_B2_H2L" 1 1019 "0x21040B08"
d G "INT_IOC_B3" 1 1020 "0x31080B08"
d G "INT_IOC_B3_L2H" 1 1021 "0x11080B08"
d G "INT_IOC_B3_H2L" 1 1022 "0x21080B08"
d G "INT_IOC_B4" 1 1023 "0x31100B08"
d G "INT_IOC_B4_L2H" 1 1024 "0x11100B08"
d G "INT_IOC_B4_H2L" 1 1025 "0x21100B08"
d G "INT_IOC_B5" 1 1026 "0x31200B08"
d G "INT_IOC_B5_L2H" 1 1027 "0x11200B08"
d G "INT_IOC_B5_H2L" 1 1028 "0x21200B08"
d G "INT_IOC_B6" 1 1029 "0x31400B08"
d G "INT_IOC_B6_L2H" 1 1030 "0x11400B08"
d G "INT_IOC_B6_H2L" 1 1031 "0x21400B08"
d G "INT_IOC_B7" 1 1032 "0x31800B08"
d G "INT_IOC_B7_L2H" 1 1033 "0x11800B08"
d G "INT_IOC_B7_H2L" 1 1034 "0x21800B08"
d G "INT_RB" 1 1041 "0x30FF0B08"
d G "INT_RB0" 1 1042 "0x31010B08"
d G "INT_RB0_L2H" 1 1043 "0x11010B08"
d G "INT_RB0_H2L" 1 1044 "0x21010B08"
d G "INT_RB1" 1 1045 "0x31020B08"
d G "INT_RB1_L2H" 1 1046 "0x11020B08"
d G "INT_RB1_H2L" 1 1047 "0x21020B08"
d G "INT_RB2" 1 1048 "0x31040B08"
d G "INT_RB2_L2H" 1 1049 "0x11040B08"
d G "INT_RB2_H2L" 1 1050 "0x21040B08"
d G "INT_RB3" 1 1051 "0x31080B08"
d G "INT_RB3_L2H" 1 1052 "0x11080B08"
d G "INT_RB3_H2L" 1 1053 "0x21080B08"
d G "INT_RB4" 1 1054 "0x31100B08"
d G "INT_RB4_L2H" 1 1055 "0x11100B08"
d G "INT_RB4_H2L" 1 1056 "0x21100B08"
d G "INT_RB5" 1 1057 "0x31200B08"
d G "INT_RB5_L2H" 1 1058 "0x11200B08"
d G "INT_RB5_H2L" 1 1059 "0x21200B08"
d G "INT_RB6" 1 1060 "0x31400B08"
d G "INT_RB6_L2H" 1 1061 "0x11400B08"
d G "INT_RB6_H2L" 1 1062 "0x21400B08"
d G "INT_RB7" 1 1063 "0x31800B08"
d G "INT_RB7_L2H" 1 1064 "0x11800B08"
d G "INT_RB7_H2L" 1 1065 "0x21800B08"
C L "jump_to_isr" 0 2 1 "FUNCTION"
D G "_STDLIB" 2 13 ""
D G "RAND_MAX" 2 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 2 26 "1"
T G "div_t" 2 34 "{sint8 quot,sint8 rem}" `722 
T G "ldiv_t" 2 39 "{sint16 quot,sint16 rem}" `726  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 3 13 ""
D G "ptrdiff_t" 3 18 "unsigned int16"
D G "size_t" 3 22 "unsigned int8"
D G "wchar_t" 3 26 "char"
D G "NULL" 3 27 "0"
D G "offsetof" 3 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 2 44 2 "FUNCTION"
C L "jump_to_isr" 2 47 1 "*"
C L "jump_to_isr" 2 47 1 "*"
F N "atoi" 2 51 ""
V L "s" 2 51 "*int8" `728 
f G "atoi" 2 51 "sint8(*int8 s)" `727  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 2 59 ""
V L "s" 2 59 "*int8" `730 
f G "atoi32" 2 59 "sint32(*int8 s)" `729  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 2 47 2 "FUNCTION"
F N "itoa" 2 80 ""
V L "num" 2 80 "sint32" `732 
V L "base" 2 80 "int8" `733 
V L "s" 2 80 "*int8" `734 
f G "itoa" 2 80 "*int8(sint32 num,int8 base,*int8 s)" `731  "Standard template: signed int16  atol(char * s)"
C L "itoa" 2 82 1 "*"
C L "itoa" 2 82 1 "*"
F N "atol" 2 86 ""
V L "s" 2 86 "*int8" `736 
f G "atol" 2 86 "sint16(*int8 s)" `735  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
C L "atol" 2 88 1 "*"
F N "strtol" 2 94 ""
V L "s" 2 94 "*int8" `738 
V L "endptr" 2 94 "*int8" `739 
V L "base" 2 94 "sint8" `740 
f G "strtol" 2 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `737  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
C L "strtol" 2 96 1 "*"
F N "strtoul" 2 102 ""
V L "s" 2 102 "*int8" `742 
V L "endptr" 2 102 "*int8" `743 
V L "base" 2 102 "sint8" `744 
f G "strtoul" 2 102 "int16(*int8 s,*int8 endptr,sint8 base)" `741  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 2 96 2 "FUNCTION"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
C L "strtoul" 2 104 1 "*"
F N "strtof" 2 111 ""
V L "s" 2 111 "*int8" `746 
V L "endptr" 2 111 "??0 *" `747 
f G "strtof" 2 111 "float(*int8 s,??0 * endptr)" `745  "provided for compatibility"
D G "strtof48" 2 117 "(s,e) strtof(s, e)"
D G "strtod" 2 118 "(s,e) strtof(s, e)"
C L "strtof" 2 104 1 "FUNCTION"
C L "strtof" 2 121 1 "*"
D G "atof" 2 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 2 121 1 "FUNCTION"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
C L "strtof" 2 144 1 "*"
F N "atoe" 2 150 ""
V L "s" 2 150 "*int8" `750 
f G "atoe" 2 150 "float(*int8 s)" `749  "Pseudo-random sequence generation functions"
C L "atoe" 2 144 1 "FUNCTION"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
C L "atoe" 2 161 1 "*"
F N "rand" 2 170 ""
f G "rand" 2 170 "int16()" `751  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
C L "rand" 2 172 1 "*"
F N "srand" 2 192 ""
V L "seed" 2 192 "int32" `753 
f G "srand" 2 192 "void(int32 seed)" `752  "Memory management functions"
C L "srand" 2 172 3 "FUNCTION"
F N "system" 2 206 ""
V L "string" 2 206 "*int8" `755 
f G "system" 2 206 "sint8(*int8 string)" `754  "Searching and sorting utilities"
C L "system" 2 172 1 "FUNCTION"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 1 "*"
C L "system" 2 212 4 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
C L "system" 2 230 1 "*"
D G "labs" 2 250 "abs"
F N "div" 2 252 ""
V L "numer" 2 252 "sint8" `757 
V L "denom" 2 252 "sint8" `758 
f G "div" 2 252 "div_t(sint8 numer,sint8 denom)" `756 
F N "ldiv" 2 253 ""
V L "numer" 2 253 "sint16" `760 
V L "denom" 2 253 "sint16" `761 
f G "ldiv" 2 253 "ldiv_t(sint16 numer,sint16 denom)" `759  "Multibyte character functions"
C L "ldiv" 2 230 4 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
D G "_STRING" 4 12 ""
C L "ldiv" 3 2 7 "FUNCTION"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*void" `763 
V L "s2" 4 34 "*void" `764 
V L "n" 4 34 "int8" `765 
F G "memmove" 4 35 "*int8(*void s1,*void s2,int8 n)" `762 
V L "sc1" 4 36 "*int8" `766 
V L "sc2" 4 37 "*int8" `767 
D G "strcopy" 4 54 "strcpy"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `769 
V L "s2" 4 61 "*int8" `770 
V L "n" 4 61 "int8" `771 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int8 n)" `768 
V L "s" 4 63 "*int8" `772 
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `774 
V L "s2" 4 78 "*int8" `775 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `773 
V L "s" 4 80 "*int8" `776 
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `778 
V L "s2" 4 96 "*int8" `779 
V L "n" 4 96 "int8" `780 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int8 n)" `777 
V L "s" 4 98 "*int8" `781 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*void" `783 
V L "s2" 4 120 "*void" `784 
V L "n" 4 120 "int8" `785 
F G "memcmp" 4 121 "sint8(*void s1,*void s2,int8 n)" `782 
V L "su1" 4 122 "*int8" `786 
V L "su2" 4 122 "*int8" `787 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `789 
V L "s2" 4 134 "*int8" `790 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `788 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `792 
V L "s2" 4 144 "*int8" `793 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `791 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `795 
V L "s2" 4 157 "*int8" `796 
V L "n" 4 157 "int8" `797 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int8 n)" `794 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `799 
V L "s2" 4 170 "*int8" `800 
V L "n" 4 170 "int8" `801 
F G "strxfrm" 4 171 "int8(*int8 s1,*int8 s2,int8 n)" `798 
V L "c" 4 172 "int8" `802 
V L "n1" 4 173 "int8" `803 
C L "strxfrm" 4 19 1 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*void" `805 
V L "c" 4 201 "int8" `806 
V L "n" 4 201 "int8" `807 
F G "memchr" 4 202 "*int8(*void s,int8 c,int8 n)" `804 
V L "uc" 4 203 "int8" `808 
V L "su" 4 204 "*int8" `809 
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `811 
V L "c" 4 215 "int8" `812 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `810 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `814 
V L "s2" 4 227 "*int8" `815 
F G "strcspn" 4 228 "int8(*int8 s1,*int8 s2)" `813 
V L "sc1" 4 229 "*int8" `816 
V L "sc2" 4 229 "*int8" `817 
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `819 
V L "s2" 4 242 "*int8" `820 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `818 
V L "sc1" 4 244 "*int8" `821 
V L "sc2" 4 244 "*int8" `822 
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `824 
V L "c" 4 257 "int8" `825 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `823 
V L "p" 4 259 "*int8" `826 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `828 
V L "s2" 4 272 "*int8" `829 
F G "strspn" 4 273 "int8(*int8 s1,*int8 s2)" `827 
V L "sc1" 4 274 "*int8" `830 
V L "sc2" 4 274 "*int8" `831 
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `833 
V L "s2" 4 291 "*int8" `834 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `832 
V L "s" 4 293 "*int8" `835 
V L "t" 4 293 "*int8" `836 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `838 
F G "strlen" 4 319 "int8(*int8 s)" `837 
V L "sc" 4 320 "*int8" `839 
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `841 
V L "s2" 4 341 "*int8" `842 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `840 
V L "beg" 4 343 "*int8" `843 
V L "end" 4 343 "*int8" `844 
V L "save" 4 344 "*int8" `845 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `847 
V L "s2" 4 392 "*int8" `848 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `846 
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `852 
F G "strlwr" 4 407 "*int8(*int8 s)" `851 
V L "p" 4 408 "*int8" `853 
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `855 
F G "strupr" 4 421 "*int8(*int8 s)" `854 
V L "p" 4 422 "*int8" `856 
F N "div" 2 275 ""
V L "numer" 2 275 "sint8" `757 
V L "denom" 2 275 "sint8" `859 
F G "div" 2 276 "div_t(sint8 numer,sint8 denom)" `756 
V L "val" 2 277 "div_t" `857 
F N "ldiv" 2 283 ""
V L "numer" 2 283 "sint16" `760 
V L "denom" 2 283 "sint16" `866 
F G "ldiv" 2 284 "ldiv_t(sint16 numer,sint16 denom)" `759 
V L "val" 2 285 "ldiv_t" `864 
F N "atoe" 2 362 ""
V L "s" 2 362 "*int8" `872 
F G "atoe" 2 363 "float(*int8 s)" `749 
V L "pow10" 2 364 "float" `871 
V L "result" 2 365 "float" `872 
V L "sign" 2 366 "int8" `873 
V L "expsign" 2 367 "int8" `874 
V L "c" 2 368 "int8" `875 
V L "ptr" 2 369 "int8" `876 
V L "i" 2 370 "int8" `877 
V L "exp" 2 371 "float" `878 
V L "expcnt" 2 372 "int8" `879 
C L "atoe" 2 398 1 "FUNCTION"
F N "atoi" 2 430 ""
V L "s" 2 430 "*int8" `892 
F G "atoi" 2 431 "sint8(*int8 s)" `727 
V L "result" 2 432 "sint8" `891 
V L "sign" 2 433 "int8" `892 
V L "base" 2 433 "int8" `893 
V L "index" 2 433 "int8" `894 
V L "c" 2 434 "int8" `895 
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
C L "atoi" 2 398 1 "FUNCTION"
F N "atol" 2 499 ""
V L "s" 2 499 "*int8" `897 
F G "atol" 2 500 "sint16(*int8 s)" `735 
V L "result" 2 501 "sint16" `896 
V L "sign" 2 502 "int8" `897 
V L "base" 2 502 "int8" `898 
V L "index" 2 502 "int8" `899 
V L "c" 2 503 "int8" `900 
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "atol" 2 398 1 "FUNCTION"
C L "mult_with10" 2 398 1 "FUNCTION"
F N "mult_with10" 2 566 ""
V L "num" 2 566 "int32" `902 
F G "mult_with10" 2 567 "sint32(int32 num)" `901 
F N "atoi32" 2 572 ""
V L "s" 2 572 "*int8" `904 
F G "atoi32" 2 573 "sint32(*int8 s)" `729 
V L "result" 2 574 "sint32" `903 
V L "sign" 2 575 "int8" `904 
V L "base" 2 575 "int8" `905 
V L "index" 2 575 "int8" `906 
V L "c" 2 576 "int8" `907 
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
C L "atoi32" 2 398 1 "FUNCTION"
F N "itoa" 2 771 ""
V L "num" 2 771 "sint32" `732 
V L "base" 2 771 "int8" `733 
V L "s" 2 771 "*int8" `911 
F G "itoa" 2 772 "*int8(sint32 num,int8 base,*int8 s)" `731 
V L "temp" 2 773 "int32" `908 
V L "i" 2 774 "int8" `909 
V L "sign" 2 774 "int8" `910 
V L "cnt" 2 774 "int8" `911 
V L "c" 2 775 "int8" `912 
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
C L "itoa" 2 398 1 "FUNCTION"
F N "strtof" 2 886 ""
V L "s" 2 886 "*int8" `746 
V L "endptr" 2 886 "??0 *" `921 
F G "strtof" 2 887 "float(*int8 s,??0 * endptr)" `745 
V L "pow10" 2 888 "float" `919 
V L "result" 2 889 "float" `920 
V L "skip" 2 890 "int1" `921 
V L "sign" 2 890 "int1" `922 
V L "point" 2 890 "int1" `923 
V L "c" 2 891 "int8" `924 
V L "ptr" 2 892 "int8" `925 
F N "strtoul" 2 1104 ""
V L "s" 2 1104 "*int8" `742 
V L "endptr" 2 1104 "*int8" `743 
V L "base" 2 1104 "sint8" `930 
F G "strtoul" 2 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `741 
V L "sc" 2 1106 "*int8" `927 
V L "s1" 2 1106 "*int8" `928 
V L "sd" 2 1106 "*int8" `929 
V L "x" 2 1107 "int16" `930 
V L "sign" 2 1108 "int8" `931 
V L "digits" 2 1109 "int8[1]" `932 
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
C L "strtoul" 2 398 1 "FUNCTION"
F N "strtol" 2 1166 ""
V L "s" 2 1166 "*int8" `738 
V L "endptr" 2 1166 "*int8" `739 
V L "base" 2 1166 "sint8" `937 
F G "strtol" 2 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `737 
V L "sc" 2 1168 "*int8" `934 
V L "s1" 2 1168 "*int8" `935 
V L "sd" 2 1168 "*int8" `936 
V L "x" 2 1169 "sint16" `937 
V L "sign" 2 1170 "int8" `938 
V L "digits" 2 1171 "int8[1]" `939 
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
C L "strtol" 2 398 1 "FUNCTION"
F N "system" 2 1229 ""
V L "string" 2 1229 "*int8" `942 
F G "system" 2 1230 "sint8(*int8 string)" `754 
F N "mblen" 2 1234 ""
V L "s" 2 1234 "*int8" `942 
V L "n" 2 1234 "int8" `943 
F G "mblen" 2 1235 "int8(*int8 s,int8 n)" `941 
F N "mbtowc" 2 1239 ""
V L "pwc" 2 1239 "*int8" `945 
V L "s" 2 1239 "*int8" `946 
V L "n" 2 1239 "int8" `947 
F G "mbtowc" 2 1240 "int8(*int8 pwc,*int8 s,int8 n)" `944 
F N "wctomb" 2 1245 ""
V L "s" 2 1245 "*int8" `949 
V L "wchar" 2 1245 "int8" `950 
F G "wctomb" 2 1246 "int8(*int8 s,int8 wchar)" `948 
F N "mbstowcs" 2 1251 ""
V L "pwcs" 2 1251 "*int8" `952 
V L "s" 2 1251 "*int8" `953 
V L "n" 2 1251 "int8" `954 
F G "mbstowcs" 2 1252 "int8(*int8 pwcs,*int8 s,int8 n)" `951 
F N "wcstombs" 2 1257 ""
V L "s" 2 1257 "*int8" `956 
V L "pwcs" 2 1257 "*int8" `957 
V L "n" 2 1257 "int8" `958 
F G "wcstombs" 2 1258 "int8(*int8 s,*int8 pwcs,int8 n)" `955 
V G "_Randseed" 2 1267 "int32" `959 
F N "rand" 2 1269 ""
F G "rand" 2 1270 "int16()" `751 
F N "srand" 2 1275 ""
V L "seed" 2 1275 "int32" `964 
F G "srand" 2 1276 "void(int32 seed)" `752 
F N "*_Cmpfun" 2 1285 ""
V L "p1" 2 1285 "*int8" `964 
V L "p2" 2 1285 "*int8" `965 
T G "*_Cmpfun" 2 1285 "sint8(*int8 p1,*int8 p2)" `963 
F N "qsort" 2 1292 ""
V L "qdata" 2 1292 "*int8" `968 
V L "qitems" 2 1292 "int8" `969 
V L "qsize" 2 1292 "int8" `970 
V L "cmp" 2 1292 "_Cmpfun" `971 
F G "qsort" 2 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `967 
V L "m" 2 1293 "int8" `972 
V L "j" 2 1293 "int8" `973 
V L "i" 2 1293 "int8" `974 
V L "l" 2 1293 "int8" `975 
V L "done" 2 1294 "int1" `976 
V L "t" 2 1295 "int8[16]" `977 
F N "bsearch" 2 1320 ""
V L "key" 2 1320 "*int8" `980 
V L "base" 2 1320 "*int8" `981 
V L "num" 2 1320 "int8" `982 
V L "width" 2 1320 "int8" `983 
V L "cmp" 2 1320 "_Cmpfun" `984 
F G "bsearch" 2 1321 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `979 
V L "p" 2 1322 "*int8" `985 
V L "q" 2 1322 "*int8" `986 
V L "n" 2 1323 "int8" `987 
V L "pivot" 2 1324 "int8" `988 
V L "val" 2 1325 "sint8" `989 
C L "bsearch" 2 398 1 "FUNCTION"
D G "MUSIC_NOTES" 6 19 ""
V G "C_NOTE" 6 23 "[4]" `991 
V G "Db_NOTE" 6 24 "[4]" `994 
V G "D_NOTE" 6 25 "[4]" `997 
V G "Eb_NOTE" 6 26 "[4]" `1000 
V G "E_NOTE" 6 27 "[4]" `1003 
V G "F_NOTE" 6 28 "[4]" `1006 
V G "Gb_NOTE" 6 29 "[4]" `1009 
V G "G_NOTE" 6 30 "[4]" `1012 
V G "Ab_NOTE" 6 31 "[4]" `1015 
V G "A_NOTE" 6 32 "[4]" `1018 
V G "Bb_NOTE" 6 33 "[4]" `1021 
V G "B_NOTE" 6 34 "[4]" `1024 
D G "TONE_PIN" 6 37 "PIN_B0"
F N "do_delay" 6 40 ""
V L "ms_delay" 6 40 "int8" `1027 
V L "num_ms" 6 40 "int8" `1028 
V L "us_delay" 6 40 "int8" `1029 
V L "num_us" 6 40 "int8" `1030 
F G "do_delay" 6 40 "void(int8 ms_delay,int8 num_ms,int8 us_delay,int8 num_us)" `1026 
V L "i" 6 41 "int8" `1031 
F N "generate_tone" 6 52 ""
V L "frequency" 6 52 "int16" `1033 
V L "duration" 6 52 "int16" `1034 
F G "generate_tone" 6 53 "void(int16 frequency,int16 duration)" `1032 
V L "total_delay_time" 6 54 "int32" `1035  "in microseconds"
V L "total_ms_delay_time" 6 55 "int16" `1036 
V L "total_us_delay_time" 6 55 "int16" `1037 
V L "num_us_delays" 6 56 "int8" `1038 
V L "num_ms_delays" 6 56 "int8" `1039 
V L "ms_delay_time" 6 56 "int8" `1040 
V L "us_delay_time" 6 56 "int8" `1041 
V L "num_periods" 6 57 "int16" `1042 
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
C L "generate_tone" 6 1 1 "FUNCTION"
D G "lcd_rs_pin" 0 9 "PIN_D4"
D G "lcd_rw_pin" 0 10 "PIN_D5"
D G "lcd_enable_pin" 0 11 "PIN_D6"
D G "lcd_data4" 0 12 "PIN_D0"
D G "lcd_data5" 0 13 "PIN_D1"
D G "lcd_data6" 0 14 "PIN_D2"
D G "lcd_data7" 0 15 "PIN_D3"
D G "__LCD_C__" 7 76 ""
T G "LCD_PIN_MAP" 7 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `1056  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 7 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 7 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 7 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 7 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 7 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 7 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 7 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 7 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 7 187 "20"
F N "lcd_read_nibble" 7 190 ""
f G "lcd_read_nibble" 7 190 "int8()" `1057 
F N "lcd_read_byte" 7 192 ""
F G "lcd_read_byte" 7 193 "int8()" `1058 
V L "low" 7 194 "int8" `1059 
V L "high" 7 194 "int8" `1060 
F N "lcd_read_nibble" 7 239 ""
F G "lcd_read_nibble" 7 240 "int8()" `1057 
V L "n" 7 242 "int8" `1061 
C L "lcd_read_nibble" 7 2 1 "FUNCTION"
F N "lcd_send_nibble" 7 256 ""
V L "n" 7 256 "int8" `1063 
F G "lcd_send_nibble" 7 257 "void(int8 n)" `1062 
C L "lcd_send_nibble" 7 2 1 "FUNCTION"
F N "lcd_send_byte" 7 274 ""
V L "address" 7 274 "int8" `1065 
V L "n" 7 274 "int8" `1066 
F G "lcd_send_byte" 7 275 "void(int8 address,int8 n)" `1064 
F N "lcd_init" 7 299 ""
F G "lcd_init" 7 300 "void()" `1067 
V L "i" 7 301 "int8" `1068 
V L "LCD_INIT_STRING" 7 302 "int8[4]" `1069 
C L "lcd_init" 7 2 2 "FUNCTION"
F N "lcd_gotoxy" 7 345 ""
V L "x" 7 345 "int8" `1071 
V L "y" 7 345 "int8" `1072 
F G "lcd_gotoxy" 7 346 "void(int8 x,int8 y)" `1070 
V L "address" 7 347 "int8" `1073 
F N "lcd_putc" 7 363 ""
V L "c" 7 363 "int8" `1075 
F G "lcd_putc" 7 364 "void(int8 c)" `1074 
F N "lcd_getc" 7 406 ""
V L "x" 7 406 "int8" `1077 
V L "y" 7 406 "int8" `1078 
F G "lcd_getc" 7 407 "int8(int8 x,int8 y)" `1076 
V L "value" 7 408 "int8" `1079 
C L "lcd_getc" 7 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 7 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 7 424 ""
V L "which" 7 424 "int8" `1081 
V L "ptr" 7 424 "*int8" `1082 
F G "lcd_set_cgram_char" 7 425 "void(int8 which,*int8 ptr)" `1080 
V L "i" 7 426 "int8" `1083 
C L "lcd_set_cgram_char" 7 2 1 "FUNCTION"
F N "lcd_cursor_on" 7 443 ""
V L "on" 7 443 "int8" `1085 
F G "lcd_cursor_on" 7 444 "void(int8 on)" `1084 
C L "lcd_cursor_on" 7 2 1 "FUNCTION"
C L "lcd_cursor_on" 7 2 1 "FUNCTION"
D G "TONE_PIN" 0 17 "PIN_B3"
V G "character1" 0 21 "int8[8]" `1086 
V G "character2" 0 22 "int8[8]" `1087 
V G "character3" 0 23 "int8[8]" `1088 
V G "character4" 0 24 "int8[8]" `1089 
V G "character5" 0 25 "int8[8]" `1090 
V G "character6" 0 26 "int8[8]" `1091 
V G "character7" 0 27 "int8[8]" `1092 
V G "randon" 0 30 "int8" `1093 
V G "puntuacion" 0 31 "int16" `1094 
V G "final" 0 32 "int16" `1095 
V G "record" 0 33 "int16" `1096 
V G "record1" 0 34 "int16" `1097 
V G "cac" 0 35 "sint16" `1098 
V G "gua" 0 36 "sint16" `1099 
V G "guar" 0 37 "int8" `1100 
V G "delay" 0 39 "int8" `1101 
V G "delay1" 0 39 "int8" `1102 
V G "delay2" 0 39 "int8" `1103 
C L "principal" 0 21 2 "FUNCTION"
F N "principal" 0 46 ""
F G "principal" 0 46 "void()" `1104  "/programa principal que contiene la mayoria de"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
V L "lo" 0 269 "int8" `1144 
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 2 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
C L "principal" 0 21 1 "FUNCTION"
F N "MAIN" 0 388 ""
F G "MAIN" 0 388 "void()" `1161  "main"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
C L "MAIN" 0 21 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_lcd" 1 3
F B "lcd_contrast" 1 0
F B "lcd_load" 3 0
F B "lcd_symbol" F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
